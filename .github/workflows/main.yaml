name: Train and Deploy on Azure ML + ACI

on:
  push:
    branches: ["main"]
    
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

env:
  RESOURCE_GROUP: myResourceGroup
  WORKSPACE_NAME: myAMLWorkspace
  COMPUTE_NAME: cpu-cluster
  ACR_NAME: hello1378
  REGISTRY: hello1378.azurecr.io
  IMAGE_NAME: imgclassification
  ACI_NAME: kidneycontainer
  PORT: 8000
  CPU: 1
  MEMORY: 1.5

jobs:
  train-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Submit Azure ML job and stream logs
        run: |
          az extension add -n ml
          JOB_ID=$(az ml job create \
            --file ./training/job.yaml \
            --resource-group $RESOURCE_GROUP \
            --workspace-name $WORKSPACE_NAME \
            --stream \
            --query name -o tsv)
          echo "Submitted job: $JOB_ID"
          echo "JOB_ID=$JOB_ID" >> $GITHUB_ENV

      - name: Download model after job completion
        run: |
          az ml job download \
            --name $JOB_ID \
            --resource-group $RESOURCE_GROUP \
            --workspace-name $WORKSPACE_NAME \
            --download-path models/
          ls -lh models/



      - name: Build & Push Docker Image with trained model
        run: |
          GIT_SHA=${GITHUB_SHA::7}
          IMAGE_TAG="$REGISTRY/$IMAGE_NAME:$GIT_SHA"
          LATEST_TAG="$REGISTRY/$IMAGE_NAME:latest"

          az acr login --name $ACR_NAME
          docker build -t $IMAGE_TAG -t $LATEST_TAG .
          docker push $IMAGE_TAG
          docker push $LATEST_TAG
        id: build

      - name: Deploy to ACI
        run: |
          if az container show -g $RESOURCE_GROUP -n $ACI_NAME > /dev/null 2>&1; then
            echo "Updating container..."
            az container update \
              --resource-group $RESOURCE_GROUP \
              --name $ACI_NAME \
              --image ${{ steps.build.outputs.IMAGE_TAG }}
          else
            echo "Creating container..."
            az container create \
              --resource-group $RESOURCE_GROUP \
              --name $ACI_NAME \
              --image ${{ steps.build.outputs.IMAGE_TAG }} \
              --registry-login-server $REGISTRY \
              --ports $PORT \
              --os-type Linux \
              --cpu $CPU \
              --memory $MEMORY \
              --restart-policy Always
          fi

      - name: Show Public IP
        run: |
          az container show -g $RESOURCE_GROUP -n $ACI_NAME --query ipAddress.ip -o tsv
