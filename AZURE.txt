 Step-by-Step Example: Deploying a Web App Container
1. Create a Resource Group
This is your container project's home base.
 Bash
az group create --name myResourceGroup --location eastus
myResourceGroup is the name ,you can change it

2 Create a Container Registry
This is where youâ€™ll store your Docker image.
 Bash
 az acr create --resource-group myResourceGroup --name myContainerRegistry --sku Basic

myContainerRegistry==custom name

3 Build and Push Your Docker Image
Assuming you have a Dockerfile locally:
Bash
az acr build --registry myContainerRegistry --image mywebapp:v1 .
mywebapp:v1==custom name of image
 before 4 th step check 5 the and 6th

4. Deploy to Azure Container Instance
Now run the container using the image from your registry:
az container create \
  --resource-group myResourceGroup \
  --name myWebAppInstance \
  --image myContainerRegistry.azurecr.io/mywebapp:v1 \
  --registry-login-server myContainerRegistry.azurecr.io \
  --registry-username <username> \
  --registry-password <password> \
  --dns-name-label mywebappdemo \
  --ports 80
  --os-type Linux `
  --cpu 1 `
  --memory 1.5 `
  --dns-name-label $DNS `
  --command-line "python webapp.py"
   Command line can be avoided if your web app is working when the image ran in local or (may be command is not included in docker file)
   sometimes when you run image with python /some other commands the cmd specified in docker file can get overwritten.
   --dns-name-label $DNS can also be avoided.
 5 before running above code you can set variables and use the placeholder in the code above, code below illustrates how to set variables
 # Resource Group and ACR
$RG="myResourceGroup"
$ACR="hello1378"
$IMAGE="imgclassification:latest"
$CONTAINER="kidneycontainer"
$DNS="kidneywebapptest"
$PORT=8000

# ACR credentials
$ACR_USER=$(az acr credential show --name $ACR --query "username" -o tsv)
$ACR_PASS=$(az acr credential show --name $ACR --query "passwords[0].value" -o tsv)
6 you can : Delete any existing container (optional, safe)
az container delete --resource-group $RG --name $CONTAINER --yes

  # Check status
az container show --resource-group $RG --name $CONTAINER --query "{State:instanceView.state,IP:ipAddress.ip,URL:ipAddress.fqdn}" -o table
should be running and IP or URL is what you use in the browser.


Once deployed, your app will be live at http://mywebappdemo.eastus.azurecontainer.io.

ðŸ§© How They Fit Together
|  |  | 
|  |  | 
|  |  | 
|  |  | 



If you want to explore this visually or through the Azure Portal instead of CLI, this Microsoft tutorial walks you through it step-by-step.
Would you like help building a Dockerfile or designing the app itself?
